{"version":3,"sources":["Constant.ts","Actions.ts","Menu.tsx","Header.tsx","MainWidthStyle.tsx","Article.tsx","PageNavigator.tsx","Utils.ts","NewArticles.tsx","App.tsx","PageManager.ts","Reducer.ts","serviceWorker.ts","index.tsx"],"names":["PropName","ARTICLE_DATA_URL","ActionType","HTTP_YOUTUBE_URL","HTTPS_YOUTUBE_URL","Header","to","src","alt","MainWidthStyle","props","className","style","width","children","Menu","optionDataList","i","push","MySelect","dispatch","useDispatch","articlesPerPage","useSelector","state","ARTICLES_PER_PAGE","onChange","e","target","name","type","UPDATE_DATA","payload","setArticlesPerPage","parseInt","value","id","map","val","key","Article","embedcode","ARTICLE_DATA","EMBEDCODE","dangerouslySetInnerHTML","__html","PageNavigator","previousPageNo","PREVIOUS_PAGE_NO","nextPageNo","NEXT_PAGE_NO","height","Utils","window","scroll","element","document","getElementById","scrollIntoView","title","path","sendAccessLog","error","console","log","twttr","widgets","load","NewArticles","activePageNo","useParams","ACTIVE_PAGE_NO","useEffect","scrollToTop","setTitle","location","pathname","hash","setActivePageNo","activeDataList","ACTIVE_ARTICLE_DATA_LIST","loadTwitter","articleData","index","App","fetch","then","response","json","articleDataList","feed","entry","item","$t","reverse","ARTICLE_DATA_LIST","setArticleDataList","exact","component","render","PageManagerFactory","articleDataListSize","newLoopPageManager","NormalPageManager","LoopPageManager","pageNo","lastPageNo","this","getLastPageNo","correctPageNo","Math","ceil","getArticlesPerPage","getActivePageNo","getActivePageFirstDataIndex","INITIAL_STATE","StateBuilder","changedPropNames","Set","Object","keys","filter","removeEmptyDataFilter","pageManager","newDefaultPageManager","length","getPreviousPageNo","getNextPageNo","slice","getActivePageLastDataIndex","httpToHttpsMapper","newArticleData","replace","Boolean","hostname","match","persistConfig","storage","whitelist","persistedReducer","persistReducer","action","build","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","pstore","persistStore","ReactDOM","loading","persistor","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.edebd640.chunk.js","sourcesContent":["// propsとstateで利用するプロパティ名\r\nexport enum PropName {\r\n    ACTIVE_PAGE_NO = 'activePageNo',\r\n    PREVIOUS_PAGE_NO = 'previousPageNo',\r\n    NEXT_PAGE_NO = 'nextPageNo',\r\n\r\n    ARTICLES_PER_PAGE = 'articlesPerPage',\r\n    \r\n    ARTICLE_DATA = 'articleData',\r\n    ARTICLE_DATA_LIST = 'articleDataList',\r\n    ACTIVE_ARTICLE_DATA_LIST = 'activeArticleDataList',\r\n\r\n    EMBEDCODE = 'embedcode',// データベースの列名(googleの仕様上アンダーバーが消える)\r\n}\r\n\r\nexport interface ArticleDataType {\r\n    [PropName.EMBEDCODE]: string;\r\n}\r\n\r\nexport const SPREADSHEET_ID: string =\r\n    '1jDoKicjNhz0ZOJRGP0K3Dw-4ioqcc1xsLyOYz0cM_rU';\r\n\r\nexport const ARTICLE_DATA_URL: string = getSpreadsheetURL(SPREADSHEET_ID);\r\n\r\nfunction getSpreadsheetURL(spreadsheetID: string): string {\r\n    return `https://spreadsheets.google.com/feeds/list/${spreadsheetID}/od6/public/values?alt=json`;\r\n}\r\n\r\nexport const HTTP_YOUTUBE_URL: string = 'http://youtube.com';\r\nexport const HTTPS_YOUTUBE_URL: string = 'https://youtube.com';","import { Action } from \"redux\";\r\nimport { ArticleDataType, PropName } from \"./Constant\";\r\nimport { StoreStateType } from \"./Reducer\";\r\n\r\nexport enum ActionType {\r\n    UPDATE_DATA\r\n}\r\n\r\nexport type PayloadType = Partial<StoreStateType>;\r\n\r\nexport interface ActionObjectType extends Action {\r\n    type: ActionType;\r\n    payload: PayloadType;\r\n}\r\n\r\nexport function setArticlesPerPage(articlesPerPage: number): ActionObjectType {\r\n    return {\r\n        type: ActionType.UPDATE_DATA,\r\n        payload: {\r\n            [PropName.ARTICLES_PER_PAGE]: articlesPerPage\r\n        }\r\n    };\r\n}\r\n\r\n\r\nexport function setActivePageNo(activePageNo: number): ActionObjectType {\r\n    return {\r\n        type: ActionType.UPDATE_DATA,\r\n        payload: {\r\n            [PropName.ACTIVE_PAGE_NO]: activePageNo\r\n        }\r\n    };\r\n}\r\n\r\nexport function setArticleDataList(articleDataList: ArticleDataType[]):\r\n    ActionObjectType {\r\n    return {\r\n        type: ActionType.UPDATE_DATA,\r\n        payload: {\r\n            [PropName.ARTICLE_DATA_LIST]: articleDataList\r\n        }\r\n    };\r\n}\r\n","import React, { ChangeEvent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { setArticlesPerPage } from './Actions';\r\nimport { PropName } from './Constant';\r\nimport { StoreStateType } from './Reducer';\r\n\r\nconst Menu: React.FC = () => {\r\n  return (\r\n    <div className=\"d-flex flex-column\">\r\n      <div className=\"card m-2\">\r\n        <div className=\"card-header\">\r\n          記事表示数\r\n        </div>\r\n        <div className=\"card-body mx-auto\">\r\n          <MySelect />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"card m-2\">\r\n        <div className=\"card-header\">\r\n          このサイトを紹介する\r\n        </div>\r\n        <div className=\"card-body mx-auto\">\r\n          <img src=\"qr.png\" alt=\"qrcode\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mx-auto\">\r\n        <Link to=\"/1\" >\r\n          <img src=\"navigationj_home.png\" alt=\"top\" />\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n\r\nconst optionDataList: number[] = [];\r\nfor (let i = 1; i <= 20; i++) {\r\n  optionDataList.push(i);\r\n}\r\n\r\nconst MySelect: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const articlesPerPage: number =\r\n    useSelector<StoreStateType, number>(\r\n      state => state[PropName.ARTICLES_PER_PAGE]\r\n    );\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLSelectElement>): void => {\r\n    switch (e.target.name) {\r\n      case PropName.ARTICLES_PER_PAGE: {\r\n        dispatch(setArticlesPerPage(parseInt(e.target.value)));\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <select className=\"form-control form-control-lg\"\r\n      onChange={handleChange} value={articlesPerPage}\r\n      name={PropName.ARTICLES_PER_PAGE} id={PropName.ARTICLES_PER_PAGE}>\r\n      {optionDataList.map(val => <option value={val} key={val}>{val}</option>)}\r\n    </select>\r\n  );\r\n};","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Link to=\"/1\" >\r\n        <img src=\"top.png\" alt=\"top\" />\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\ninterface PropType {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst MainWidthStyle: React.FC<PropType> = (props: PropType) => {\r\n  return (\r\n    <div className=\"mx-auto\" style={{ width: '600px' }}>\r\n      {props.children}\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default MainWidthStyle;","import React from 'react';\r\nimport { ArticleDataType, PropName } from './Constant';\r\n\r\ninterface PropType {\r\n  [PropName.ARTICLE_DATA]: ArticleDataType;\r\n}\r\n\r\nconst Article: React.FC<PropType> = (props: PropType) => {\r\n  const embedcode: string = props[PropName.ARTICLE_DATA][PropName.EMBEDCODE];\r\n\r\n  return (\r\n    <div className=\"card m-2\">\r\n      <div className=\"card-body\">\r\n        <div dangerouslySetInnerHTML={{\r\n          __html: embedcode\r\n        }}>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Article;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport { PropName } from './Constant';\r\nimport { StoreStateType } from './Reducer';\r\n\r\nconst PageNavigator: React.FC = () => {\r\n  const previousPageNo: number =\r\n    useSelector<StoreStateType, number>(state => state[PropName.PREVIOUS_PAGE_NO]);\r\n\r\n  const nextPageNo: number =\r\n    useSelector<StoreStateType, number>(state => state[PropName.NEXT_PAGE_NO]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mx-auto fixed-bottom p-2 d-flex justify-content-around\"\r\n        style={{ width: 'inherit' }}>\r\n        <div>\r\n          <Link to={`${previousPageNo}`} >\r\n            <img src=\"navigationj_prev.png\" alt=\"prev\" />\r\n          </Link>\r\n        </div>\r\n\r\n        <div className=\"d-flex flex-column justify-content-end\">\r\n          <Link to={`/menu`}>\r\n            <img className=\"border border-secondary rounded\" src=\"justify.svg\" alt=\"\" width=\"72\" height=\"72\" />\r\n          </Link>\r\n        </div >\r\n\r\n        <div>\r\n          <Link to={`${nextPageNo}`}>\r\n            <img src=\"navigationj_next.png\" alt=\"next\" />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: \"112px\" }}>\r\n        {\r\n          //float margin\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageNavigator;","export default class Utils {\r\n    public static scrollToTop(): void {\r\n        window.scroll(0, 0);\r\n    }\r\n\r\n    public static scrollToElement(id: string): void {\r\n        const element: HTMLElement | null = document.getElementById(id);\r\n        if (element != null) {\r\n            element.scrollIntoView(true);\r\n        }\r\n    }\r\n\r\n    public static setTitle(title: string): void {\r\n        document.title = title;\r\n    }\r\n\r\n    public static sendAccessLog(path: string): void {\r\n        // for Google Analytics\r\n        // index.htmlで定義している関数\r\n        // HACK\r\n        try {\r\n            (window as any).sendAccessLog(path);\r\n        } catch (error) {\r\n            console.log('sendAccessLogError');\r\n        }\r\n    }\r\n\r\n    public static loadTwitter(): void {\r\n        // for twitter\r\n        // index.htmlで定義している関数\r\n        // HACK\r\n        try {\r\n            (window as any).twttr.widgets.load();\r\n        } catch (error) {\r\n            console.log('loadTwitterError');\r\n        }\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport { setActivePageNo } from './Actions';\r\nimport Article from './Article';\r\nimport { ArticleDataType, PropName } from './Constant';\r\nimport PageNavigator from './PageNavigator';\r\nimport { StoreStateType } from './Reducer';\r\nimport Utils from './Utils';\r\n\r\ninterface RouterParamType {\r\n  [PropName.ACTIVE_PAGE_NO]: string;\r\n}\r\n\r\nconst NewArticles: React.FC = () => {\r\n  const activePageNo = parseInt(useParams<RouterParamType>()[PropName.ACTIVE_PAGE_NO]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    Utils.scrollToTop();\r\n    Utils.setTitle(`zoo zoo town - page ${activePageNo}`);\r\n    Utils.sendAccessLog(window.location.pathname + window.location.hash);\r\n    dispatch(setActivePageNo(activePageNo));\r\n  }, [activePageNo, dispatch]\r\n  );\r\n\r\n  const activeDataList: ArticleDataType[] =\r\n    useSelector<StoreStateType, ArticleDataType[]>(\r\n      state => state[PropName.ACTIVE_ARTICLE_DATA_LIST]\r\n    );\r\n\r\n  useEffect(Utils.loadTwitter, [activeDataList]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"d-flex flex-column align-items-center\" >\r\n        {activeDataList.map((articleData, index) =>\r\n          <Article articleData={articleData} key={index} />\r\n        )}\r\n      </div>\r\n      <PageNavigator />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewArticles;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { setArticleDataList } from './Actions';\r\nimport { ArticleDataType, ARTICLE_DATA_URL, PropName } from './Constant';\r\nimport Header from \"./Header\";\r\nimport MainWidthStyle from './MainWidthStyle';\r\nimport Menu from './Menu';\r\nimport NewArticles from './NewArticles';\r\n\r\nconst App: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    console.log('fetch');\r\n    fetch(ARTICLE_DATA_URL)\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        const articleDataList: ArticleDataType[] = [];\r\n        for (const item of json.feed.entry) {\r\n          const articleData: ArticleDataType = {\r\n            [PropName.EMBEDCODE]: item[`gsx$${[PropName.EMBEDCODE]}`].$t\r\n          };\r\n          articleDataList.push(articleData);\r\n        }\r\n        articleDataList.reverse();// 新しいもの順に並べ替える\r\n        dispatch(setArticleDataList(articleDataList));\r\n      });\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <MainWidthStyle>\r\n        <Header />\r\n      </MainWidthStyle>\r\n\r\n      <section id=\"main\">\r\n        <MainWidthStyle>\r\n          <Switch>\r\n            <Route exact path={`/menu`} component={Menu} />\r\n            <Route exact path={`/:${PropName.ACTIVE_PAGE_NO}`} component={NewArticles} />\r\n\r\n            // 上記のパスに一致しないものは1ページ目にとばす\r\n            <Route render={\r\n              (): JSX.Element => <Redirect to=\"/1\" />\r\n            } />\r\n          </Switch>\r\n        </MainWidthStyle>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;","const FIRST_PAGE_NO: number = 1;\r\n\r\nexport interface PageManager {\r\n    getPreviousPageNo(): number;\r\n    getActivePageNo(): number;\r\n    getNextPageNo(): number;\r\n    getLastPageNo(): number;\r\n    getArticlesPerPage(): number;\r\n    getActivePageFirstDataIndex(): number;\r\n    getActivePageLastDataIndex(): number;\r\n}\r\n\r\nexport class PageManagerFactory {\r\n    static newDefaultPageManager(articleDataListSize: number,\r\n        articlesPerPage: number,\r\n        activePageNo: number): PageManager {\r\n        return PageManagerFactory.newLoopPageManager(articleDataListSize,\r\n            articlesPerPage,\r\n            activePageNo);\r\n    }\r\n\r\n    static newNormalPageManager(articleDataListSize: number,\r\n        articlesPerPage: number,\r\n        activePageNo: number): PageManager {\r\n        return new NormalPageManager(articleDataListSize,\r\n            articlesPerPage,\r\n            activePageNo);\r\n    }\r\n\r\n    static newLoopPageManager(articleDataListSize: number,\r\n        articlesPerPage: number,\r\n        activePageNo: number): PageManager {\r\n        return new LoopPageManager(articleDataListSize,\r\n            articlesPerPage,\r\n            activePageNo);\r\n    }\r\n}\r\n\r\nclass NormalPageManager implements PageManager {\r\n    constructor(private articleDataListSize: number,\r\n        private articlesPerPage: number,\r\n        private activePageNo: number) {\r\n    }\r\n\r\n    protected correctPageNo(pageNo: number): number {\r\n        const lastPageNo: number = this.getLastPageNo();\r\n\r\n        if (pageNo < FIRST_PAGE_NO) {// 下限\r\n            return FIRST_PAGE_NO;\r\n        } else if (lastPageNo < pageNo) {// 上限\r\n            return lastPageNo;\r\n        } else {// 正常値\r\n            return pageNo;\r\n        }\r\n    }\r\n\r\n    getPreviousPageNo(): number {\r\n        return this.correctPageNo(this.activePageNo - 1);\r\n    }\r\n\r\n    getActivePageNo(): number {\r\n        return this.correctPageNo(this.activePageNo);\r\n    }\r\n\r\n    getNextPageNo(): number {\r\n        return this.correctPageNo(this.activePageNo + 1);\r\n    }\r\n\r\n    getLastPageNo(): number {\r\n        return Math.ceil(this.articleDataListSize / this.getArticlesPerPage());\r\n    }\r\n\r\n    getArticlesPerPage(): number {\r\n        const articlesPerPage: number = this.articlesPerPage;\r\n\r\n        if (articlesPerPage < 1) {// 下限\r\n            return 1;\r\n        } else if (20 < articlesPerPage) {// 上限\r\n            return 20;\r\n        } else {// 正常値\r\n            return articlesPerPage;\r\n        }\r\n    }\r\n\r\n    getActivePageFirstDataIndex(): number {\r\n        return (this.getActivePageNo() - 1) * this.getArticlesPerPage();\r\n    }\r\n\r\n    getActivePageLastDataIndex(): number {\r\n        return this.getActivePageFirstDataIndex() + this.getArticlesPerPage();\r\n    }\r\n}\r\n\r\nclass LoopPageManager extends NormalPageManager {\r\n    protected correctPageNo(pageNo: number): number {\r\n        const lastPageNo: number = this.getLastPageNo();\r\n\r\n        if (pageNo < FIRST_PAGE_NO) {// 下限\r\n            return (pageNo % lastPageNo) + lastPageNo;\r\n        } else if (lastPageNo < pageNo) {// 上限\r\n            return pageNo % lastPageNo;\r\n        } else {// 正常値\r\n            return pageNo;\r\n        }\r\n    }\r\n}","import { ActionObjectType, ActionType, PayloadType } from \"./Actions\";\r\nimport { ArticleDataType, HTTPS_YOUTUBE_URL, HTTP_YOUTUBE_URL, PropName } from \"./Constant\";\r\nimport { PageManager, PageManagerFactory } from \"./PageManager\";\r\n\r\nexport interface StoreStateType {\r\n    [PropName.ACTIVE_PAGE_NO]: number;\r\n    [PropName.PREVIOUS_PAGE_NO]: number;\r\n    [PropName.NEXT_PAGE_NO]: number;\r\n    [PropName.ARTICLES_PER_PAGE]: number;\r\n    [PropName.ARTICLE_DATA_LIST]: ArticleDataType[];\r\n    [PropName.ACTIVE_ARTICLE_DATA_LIST]: ArticleDataType[];\r\n}\r\n\r\nconst INITIAL_STATE: StoreStateType = {\r\n    [PropName.ACTIVE_PAGE_NO]: 1,\r\n    [PropName.PREVIOUS_PAGE_NO]: 1,\r\n    [PropName.NEXT_PAGE_NO]: 1,\r\n    [PropName.ARTICLES_PER_PAGE]: 5,\r\n    [PropName.ARTICLE_DATA_LIST]: [],\r\n    [PropName.ACTIVE_ARTICLE_DATA_LIST]: []\r\n};\r\n\r\nexport default function Reducer(state = INITIAL_STATE, action: ActionObjectType): StoreStateType {\r\n    switch (action.type) {\r\n        case ActionType.UPDATE_DATA: {\r\n            return new StateBuilder(state, action.payload).build();\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nclass StateBuilder {\r\n    private state: StoreStateType;\r\n    private changedPropNames: Set<string>;\r\n\r\n    constructor(state: StoreStateType, payload: PayloadType) {\r\n        this.state = { ...state, ...payload };\r\n\r\n        this.changedPropNames = new Set(Object.keys(payload));\r\n    }\r\n\r\n    build(): StoreStateType {\r\n        const articleDataList: ArticleDataType[] = this.state[PropName.ARTICLE_DATA_LIST]\r\n            .filter(removeEmptyDataFilter);\r\n\r\n        const pageManager: PageManager =\r\n            PageManagerFactory.newDefaultPageManager(\r\n                articleDataList.length, this.state[PropName.ARTICLES_PER_PAGE], this.state[PropName.ACTIVE_PAGE_NO]);\r\n\r\n        // fetchされる前はarticleDataListが空なのでpageManagerを使用するとページが0になる\r\n        // this.state[PropName.ACTIVE_PAGE_NO] = pageManager.getActivePageNo();\r\n\r\n        this.state[PropName.PREVIOUS_PAGE_NO] = pageManager.getPreviousPageNo();\r\n        this.state[PropName.NEXT_PAGE_NO] = pageManager.getNextPageNo();\r\n        this.state[PropName.ARTICLES_PER_PAGE] = pageManager.getArticlesPerPage();\r\n        this.state[PropName.ARTICLE_DATA_LIST] = articleDataList;\r\n        this.state[PropName.ACTIVE_ARTICLE_DATA_LIST] = articleDataList.slice(\r\n            pageManager.getActivePageFirstDataIndex(),\r\n            pageManager.getActivePageLastDataIndex())\r\n            .map(httpToHttpsMapper);\r\n\r\n        return this.state;\r\n    }\r\n}\r\n\r\nfunction removeEmptyDataFilter(articleData: ArticleDataType): boolean {\r\n    return articleData[PropName.EMBEDCODE] !== '';\r\n}\r\n\r\n// 埋め込みコード内のURLがhttpになっているのでエラー防止のためにhttpsに置換する\r\nfunction httpToHttpsMapper(articleData: ArticleDataType): ArticleDataType {\r\n    let newArticleData: ArticleDataType = { ...articleData }; //deep copy\r\n    newArticleData[PropName.EMBEDCODE] =\r\n        newArticleData[PropName.EMBEDCODE].replace(HTTP_YOUTUBE_URL, HTTPS_YOUTUBE_URL);\r\n    return newArticleData;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport { HashRouter as Router } from 'react-router-dom';\r\nimport { createStore } from 'redux';\r\nimport { persistReducer, persistStore } from 'redux-persist';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport App from './App';\r\nimport { PropName } from './Constant';\r\nimport './index.css';\r\nimport Reducer from './Reducer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    whitelist: [PropName.ARTICLES_PER_PAGE],\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, Reducer);\r\n\r\n// HACK\r\nconst store = createStore(persistedReducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__());\r\nconst pstore = persistStore(store as any);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <PersistGate loading={<p>loading...</p>} persistor={pstore}>\r\n            <Router>\r\n                <App />\r\n            </Router >\r\n        </PersistGate>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}