{"version":3,"sources":["Constant.ts","Header.tsx","Article.tsx","MainSection.tsx","PageNavigator.tsx","Utils.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PropName","Header","to","src","alt","React","Component","BODY_STYLE","width","Article","embedcode","this","props","data","replace","className","dangerouslySetInnerHTML","__html","MainSection","state","dataList","page","startIndex","parseInt","endIndex","slice","getActiveDataList","map","index","key","fetch","then","res","json","feed","entry","item","gsx$embedcode","$t","push","reverse","setState","PageNavigator","getPreviousPage","getNextPage","pageNum","toString","Math","max","Utils","window","scroll","title","document","App","match","params","scrollToTop","setTitle","style","Boolean","location","hostname","ReactDOM","render","hashType","exact","path","component","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25f25d96.chunk.js","sourcesContent":["// propsとstateで利用するプロパティ名\r\nexport enum PropName {\r\n    page = 'page',// active page\r\n\r\n    dataList = 'dataList',// 取得したデータ全体\r\n    data = 'data',// \r\n    embedcode = 'embedcode',// データベースの列名(googleの仕様上アンダーバーが消える)\r\n}\r\n\r\nexport interface DataType {\r\n    [PropName.embedcode]: string\r\n}\r\n\r\nexport const JSON_DATA_URL: string =\r\n    'https://spreadsheets.google.com/feeds/list/1jDoKicjNhz0ZOJRGP0K3Dw-4ioqcc1xsLyOYz0cM_rU/od6/public/values?alt=json';\r\n\r\nexport const PAGE_QUANTITY: number = 5;\r\n\r\nexport const HTTP_YOUTUBE_URL: string = 'http://youtube.com';\r\nexport const HTTPS_YOUTUBE_URL: string = 'https://youtube.com';\r\n\r\nexport const BODY_STYLE: React.CSSProperties = {\r\n    width: '600px'\r\n};\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class Header extends React.Component {\r\n  render(): JSX.Element {\r\n    return (\r\n      <div>\r\n        <Link to=\"/\" >\r\n          <img src=\"/top.png\" alt=\"top\" />\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { PropName, DataType, HTTP_YOUTUBE_URL, HTTPS_YOUTUBE_URL } from './Constant';\r\n\r\ninterface PropType {\r\n  [PropName.data]: DataType\r\n}\r\n\r\nexport default class Article extends React.Component<PropType> {\r\n  render(): JSX.Element {\r\n    let embedcode: string = this.props[PropName.data][PropName.embedcode];\r\n    if (embedcode === '') {\r\n      return <></>;\r\n    }\r\n\r\n    // 埋め込み用のコードがhttpなっているのでエラー防止のためにhttpsに置換する\r\n    embedcode = embedcode.replace(HTTP_YOUTUBE_URL, HTTPS_YOUTUBE_URL);\r\n\r\n    return (\r\n      <div className=\"card m-2\">\r\n        <div className=\"card-body\">\r\n          <div dangerouslySetInnerHTML={{\r\n            __html: embedcode\r\n          }}>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Article from './Article';\r\nimport { PropName, DataType, PAGE_QUANTITY, JSON_DATA_URL } from './Constant';\r\n\r\ninterface PropType {\r\n  [PropName.page]: string\r\n}\r\n\r\ninterface StateType {\r\n  [PropName.dataList]: DataType[];\r\n}\r\n\r\nexport default class MainSection extends React.Component<PropType, StateType> {\r\n  constructor(props: PropType) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      [PropName.dataList]: []\r\n    };\r\n  }\r\n\r\n  getActiveDataList(): DataType[] {\r\n    const page: string = this.props[PropName.page];\r\n    const startIndex: number = (parseInt(page) - 1) * PAGE_QUANTITY;\r\n    const endIndex: number = startIndex + PAGE_QUANTITY;\r\n    return this.state.dataList.slice(startIndex, endIndex);\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <>\r\n        {this.getActiveDataList().map((data, index) =>\r\n          <Article data={data} key={index} />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    fetch(JSON_DATA_URL)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        const dataList: DataType[] = [];\r\n        for (const item of json.feed.entry) {\r\n          const data: DataType = {\r\n            [PropName.embedcode]: item.gsx$embedcode.$t\r\n          };\r\n          dataList.push(data);\r\n        }\r\n        dataList.reverse();// 新しいもの順に並べ替える\r\n        this.setState({\r\n          [PropName.dataList]: dataList\r\n        });\r\n      });\r\n  }\r\n}","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { PropName } from './Constant';\r\n\r\ninterface PropType {\r\n  [PropName.page]: string\r\n}\r\n\r\nexport default class PageNavigator extends React.Component<PropType> {\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <div className=\"m-2 d-flex justify-content-between\">\r\n        <div>\r\n          <Link to={this.getPreviousPage()} >\r\n            <img src=\"/navigationj_prev.png\" alt=\"prev\" />\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          <Link to={this.getNextPage()}>\r\n            <img src=\"/navigationj_next.png\" alt=\"next\" />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getNextPage(): string {\r\n    const page: string = this.props[PropName.page];\r\n    let pageNum: number = parseInt(page);\r\n    pageNum++;\r\n    return pageNum.toString();\r\n  }\r\n\r\n  getPreviousPage(): string {\r\n    const page: string = this.props[PropName.page];\r\n    let pageNum: number = parseInt(page);\r\n    pageNum--;\r\n    pageNum = Math.max(pageNum, 1);//ページの最小値\r\n    return pageNum.toString();\r\n  }\r\n}","export default class Utils {\r\n    public static scrollToTop(): void {\r\n        window.scroll(0, 0);\r\n    }\r\n\r\n    public static setTitle(title: string): void {\r\n        document.title = title;\r\n    }\r\n}","import React from 'react';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport Header from \"./Header\";\r\nimport MainSection from './MainSection';\r\nimport PageNavigator from \"./PageNavigator\";\r\nimport { PropName, BODY_STYLE } from './Constant';\r\nimport Utils from './Utils';\r\n\r\ninterface RouterPropType extends RouteComponentProps<{\r\n  [PropName.page]: string\r\n}> {\r\n}\r\n\r\ninterface PropType extends RouterPropType {\r\n}\r\n\r\nexport default class App extends React.Component<PropType> {\r\n\r\n  render(): JSX.Element {\r\n    const page: string = this.props.match.params[PropName.page];\r\n    Utils.scrollToTop();\r\n    Utils.setTitle(`zoo zoo town - page ${page}`);\r\n\r\n    return (\r\n      <div className=\"mx-auto d-flex flex-column align-items-center\" style={BODY_STYLE}>\r\n        <Header />\r\n\r\n        <MainSection page={page} />\r\n\r\n        <PageNavigator page={page} />\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { HashRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { PropName } from './Constant';\r\n\r\nReactDOM.render(\r\n    <Router hashType=\"noslash\">\r\n        <Switch>\r\n            <Route exact path={`/:${PropName.page}`} component={App} />\r\n            <Route render={\r\n                (): JSX.Element => <Redirect to=\"/1\" />\r\n            } />\r\n        </Switch>\r\n    </Router>,\r\n    document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}