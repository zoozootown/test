{"version":3,"sources":["PageController.tsx","TopLogo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PropName","TopLogo","to","src","alt","React","Component","PageController","className","this","getPreviousPage","getNextPage","page","props","pageNum","parseInt","toString","Math","max","STYLE","width","App","state","dataList","embedcode","match","params","startIndex","slice","map","data","replace","join","window","scroll","style","dangerouslySetInnerHTML","__html","getActiveDataList","fetch","then","res","json","feed","entry","item","gsx$embedcode","$t","push","setState","reverse","Boolean","location","hostname","ReactDOM","render","hashType","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kKAIKA,E,sFCDgBC,E,iLAEjB,OACE,6BACE,kBAAC,IAAD,CAAMC,GAAG,KACP,yBAAKC,IAAI,YAAYC,IAAI,oB,GALEC,IAAMC,Y,SDCtCN,K,aAAAA,M,SEWAA,EFHgBO,E,iLAGjB,OACE,yBAAKC,UAAU,sCACb,6BACE,kBAAC,IAAD,CAAMN,GAAIO,KAAKC,mBACb,yBAAKP,IAAI,yBAAyBC,IAAI,2BAG1C,6BACE,kBAAC,IAAD,CAAMF,GAAIO,KAAKE,eACb,yBAAKR,IAAI,yBAAyBC,IAAI,8B,oCAQ9C,IAAMQ,EAAeH,KAAKI,MAAMb,EAASY,MACrCE,EAAkBC,SAASH,GAE/B,SADAE,GACeE,a,wCAIf,IAAMJ,EAAeH,KAAKI,MAAMb,EAASY,MACrCE,EAAkBC,SAASH,GAG/B,OAFAE,KACAA,EAAUG,KAAKC,IAAIJ,EAAS,IACbE,e,GA/ByBX,IAAMC,WEJ5Ca,EAA6B,CACjCC,MAAO,U,SAMJpB,K,YAAAA,E,oBAAAA,E,uBAAAA,M,SAwBgBqB,E,YACnB,WAAYR,GAAkB,IAAD,gCAC3B,4CAAMA,KAEDS,OAAL,mBACGtB,EAASY,KAAO,IADnB,cAEGZ,EAASuB,SAAW,CAAC,eAAGvB,EAASwB,UAAY,MAFhD,GAH2B,E,iFAU3B,IAAMZ,EAAeH,KAAKI,MAAMY,MAAMC,OAAO1B,EAASY,MAChDe,EAvCoB,GAuCEZ,SAASH,GAAQ,GAG7C,OADEH,KAAKa,MAAMC,SAASK,MAAMD,EAAYA,EAzCd,GA2CvBE,KAAI,SAAAC,GACH,OAAO,eAEJ9B,EAASwB,UAAYM,EAAK9B,EAASwB,WACjCO,QAAQ,qBAAsB,2BAGpCF,KAAI,SAAAC,GACH,MAAM,gDAAN,OAAuDA,EAAK9B,EAASwB,WAArE,mBAEDQ,KAXI,Q,2CAePC,OAAOC,OAAO,EAAG,K,+BAIjB,OACE,yBAAK1B,UAAU,gDAAgD2B,MAAOhB,GACpE,kBAAC,EAAD,MAEA,yBAAKiB,wBAAyB,CAC5BC,OAAQ5B,KAAK6B,uBAIf,kBAAC,EAAD,CAAgB1B,KAAMH,KAAKI,MAAMY,MAAMC,OAAO1B,EAASY,W,0CAKlC,IAAD,OACxB2B,MAlFF,sHAmFKC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACJ,IAAMnB,EAAuB,GADjB,uBAEZ,YAAiBmB,EAAKC,KAAKC,MAA3B,+CAAkC,CAAC,IAA1BC,EAAyB,QAC5Bf,EAAc,eACf9B,EAASwB,UAAYqB,EAAKC,cAAcC,IAE3CxB,EAASyB,KAAKlB,IANJ,kFAQZ,EAAKmB,SAAL,eACGjD,EAASuB,SAAWA,EAAS2B,mB,GA5DP7C,IAAMC,W,OC3BnB6C,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAAS5B,MACvB,2DCZN6B,IAASC,OACL,kBAAC,IAAD,CAAQC,SAAS,WACb,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IACdH,OACI,kBAAmB,kBAAC,IAAD,CAAUrD,GAAG,UAExC,kBAAC,IAAD,CAAOuD,OAAK,EAACC,KAAK,SAASC,UAAWtC,KAE1CuC,SAASC,eAAe,SD6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.0ac0ed58.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// propsとstateで利用するプロパティ名\r\nenum PropName {\r\n  page = 'page',\r\n}\r\n\r\ninterface PropType {\r\n  [PropName.page]: string\r\n}\r\n\r\nexport default class PageController extends React.Component<PropType> {\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <div className=\"m-2 d-flex justify-content-between\">\r\n        <div>\r\n          <Link to={this.getPreviousPage()} >\r\n            <img src=\"./navigationj_prev.png\" alt=\"navigationj_prev.png\" />\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          <Link to={this.getNextPage()}>\r\n            <img src=\"./navigationj_next.png\" alt=\"navigationj_next.png\" />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getNextPage(): string {\r\n    const page: string = this.props[PropName.page];\r\n    let pageNum: number = parseInt(page);\r\n    pageNum++;\r\n    return pageNum.toString();\r\n  }\r\n\r\n  getPreviousPage(): string {\r\n    const page: string = this.props[PropName.page];\r\n    let pageNum: number = parseInt(page);\r\n    pageNum--;\r\n    pageNum = Math.max(pageNum, 1);//ページの最小値\r\n    return pageNum.toString();\r\n  }\r\n}","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class TopLogo extends React.Component {\r\n  render(): JSX.Element {\r\n    return (\r\n      <div>\r\n        <Link to=\"/\" >\r\n          <img src=\"./top.png\" alt=\"top_image\" />\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport TopLogo from \"./TopLogo\";\r\nimport PageController from \"./PageController\";\r\n\r\nconst SPREADSHEET_URL: string =\r\n  'https://spreadsheets.google.com/feeds/list/1jDoKicjNhz0ZOJRGP0K3Dw-4ioqcc1xsLyOYz0cM_rU/od6/public/values?alt=json';\r\n\r\nconst STYLE: React.CSSProperties = {\r\n  width: '600px',\r\n};\r\n\r\nconst PAGE_QUANTITY: number = 5;\r\n\r\n// propsとstateで利用するプロパティ名\r\nenum PropName {\r\n  page = 'page',\r\n  dataList = 'dataList',// 取得したデータ全体\r\n\r\n  embedcode = 'embedcode',// データベースの列名(googleの仕様上アンダーバーが消える)\r\n}\r\n\r\ninterface RouterPropType extends RouteComponentProps<{\r\n  [PropName.page]: string\r\n}> {\r\n}\r\n\r\ninterface PropType extends RouterPropType {\r\n}\r\n\r\ninterface DataType {\r\n  [PropName.embedcode]: string\r\n}\r\n\r\ninterface StateType {\r\n  [PropName.page]: string;\r\n  [PropName.dataList]: DataType[];\r\n}\r\n\r\nexport default class App extends React.Component<PropType, StateType> {\r\n  constructor(props: PropType) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      [PropName.page]: '',\r\n      [PropName.dataList]: [{ [PropName.embedcode]: '' }],\r\n    };\r\n  }\r\n\r\n  getActiveDataList(): string {\r\n    const page: string = this.props.match.params[PropName.page];\r\n    const startIndex: number = (parseInt(page) - 1) * PAGE_QUANTITY;\r\n    const activeList: DataType[] =\r\n      this.state.dataList.slice(startIndex, startIndex + PAGE_QUANTITY);\r\n    return activeList\r\n      .map(data => {\r\n        return {\r\n          // 埋め込み用のコードがhttpなっているのでエラー防止のためにhttpsに置換する\r\n          [PropName.embedcode]: data[PropName.embedcode]\r\n            .replace('http://youtube.com', 'https://youtube.com')\r\n        };\r\n      })\r\n      .map(data => {\r\n        return `<div class=\"card m-2\"><div class=\"card-body\">${data[PropName.embedcode]}</div></div>`;\r\n      })\r\n      .join(`\\n`);\r\n  }\r\n\r\n  componentDidUpdate(): void {\r\n    window.scroll(0, 0);\r\n  }\r\n\r\n  render(): JSX.Element {\r\n    return (\r\n      <div className=\"mx-auto d-flex flex-column align-items-center\" style={STYLE}>\r\n        <TopLogo />\r\n\r\n        <div dangerouslySetInnerHTML={{\r\n          __html: this.getActiveDataList()\r\n        }}>\r\n        </div>\r\n\r\n        <PageController page={this.props.match.params[PropName.page]} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    fetch(SPREADSHEET_URL)\r\n      .then(res => res.json())\r\n      .then(json => {\r\n        const dataList: DataType[] = [];\r\n        for (let item of json.feed.entry) {\r\n          let data: DataType = {\r\n            [PropName.embedcode]: item.gsx$embedcode.$t\r\n          };\r\n          dataList.push(data);\r\n        }\r\n        this.setState({\r\n          [PropName.dataList]: dataList.reverse()// 新しいもの順に並べ替える\r\n        });\r\n      });\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { HashRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Router hashType=\"noslash\">\r\n        <Route exact path=\"/\"\r\n            render={\r\n                (): JSX.Element => <Redirect to=\"/1\" />\r\n            } />\r\n        <Route exact path=\"/:page\" component={App} />\r\n    </Router>,\r\n    document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}