{"version":3,"sources":["Constant.ts","Actions.ts","Header.tsx","Article.tsx","MainSection.tsx","PageNavigator.tsx","Utils.ts","App.tsx","Reducer.ts","serviceWorker.ts","index.tsx"],"names":["PropName","ARTICLE_DATA_URL","ActionType","ARTICLES_PER_PAGE","HTTP_YOUTUBE_URL","HTTPS_YOUTUBE_URL","Header","to","src","alt","Article","props","embedcode","ARTICLE_DATA","EMBEDCODE","className","dangerouslySetInnerHTML","__html","MainSection","activeDataList","useSelector","state","ACTIVE_ARTICLE_DATA_LIST","map","articleData","index","key","PageNavigator","previousPageNo","PREVIOUS_PAGE_NO","nextPageNo","NEXT_PAGE_NO","style","width","Utils","window","scroll","title","document","path","sendAccessLog","error","console","log","twttr","widgets","load","App","pageNo","useParams","ACTIVE_PAGE_NO","dispatch","useDispatch","useEffect","scrollToTop","setTitle","location","pathname","hash","type","UPDATE_DATA","payload","setPageNo","fetch","then","response","json","articleDataList","feed","entry","item","$t","push","reverse","ARTICLE_DATA_LIST","setArticleDataList","loadTwitter","INITIAL_STATE","StateBuilder","this","page","pageNum","parseInt","Math","max","toString","getPreviousPage","getNextPage","filter","removeEmptyDataFilter","startIndex","endIndex","slice","httpToHttpsMapper","getActiveDataList","newArticleData","replace","Boolean","hostname","match","ReactDOM","render","store","createStore","action","build","__REDUX_DEVTOOLS_EXTENSION__","exact","component","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6287863.chunk.js","sourcesContent":["// propsとstateで利用するプロパティ名\r\nexport enum PropName {\r\n    ACTIVE_PAGE_NO = 'activePageNo',\r\n    PREVIOUS_PAGE_NO = 'previousPageNo',\r\n    NEXT_PAGE_NO = 'nextPageNo',\r\n\r\n    ARTICLE_DATA = 'articleData',\r\n    ARTICLE_DATA_LIST = 'articleDataList',\r\n    ACTIVE_ARTICLE_DATA_LIST = 'activeArticleDataList',\r\n\r\n    EMBEDCODE = 'embedcode',// データベースの列名(googleの仕様上アンダーバーが消える)\r\n}\r\n\r\nexport interface ArticleDataType {\r\n    [PropName.EMBEDCODE]: string;\r\n}\r\n\r\nexport const SPREADSHEET_ID: string =\r\n    '1jDoKicjNhz0ZOJRGP0K3Dw-4ioqcc1xsLyOYz0cM_rU';\r\n\r\nexport const ARTICLE_DATA_URL: string = getSpreadsheetURL(SPREADSHEET_ID);\r\n\r\nfunction getSpreadsheetURL(spreadsheetID: string): string {\r\n    return `https://spreadsheets.google.com/feeds/list/${spreadsheetID}/od6/public/values?alt=json`;\r\n}\r\n\r\nexport const ARTICLES_PER_PAGE: number = 5;\r\n\r\nexport const HTTP_YOUTUBE_URL: string = 'http://youtube.com';\r\nexport const HTTPS_YOUTUBE_URL: string = 'https://youtube.com';\r\n","import { Action } from \"redux\";\r\nimport { ArticleDataType, PropName } from \"./Constant\";\r\nimport { StoreType } from \"./Reducer\";\r\n\r\nexport enum ActionType {\r\n    UPDATE_DATA\r\n}\r\n\r\nexport type PayloadType = Partial<StoreType>;\r\n\r\nexport interface ActionObjectType extends Action {\r\n    type: ActionType;\r\n    payload: PayloadType;\r\n}\r\n\r\nexport function setPageNo(pageNo: string): ActionObjectType {\r\n    return {\r\n        type: ActionType.UPDATE_DATA,\r\n        payload: {\r\n            [PropName.ACTIVE_PAGE_NO]: pageNo\r\n        }\r\n    };\r\n}\r\n\r\nexport function setArticleDataList(articleDataList: ArticleDataType[]):\r\n    ActionObjectType {\r\n    return {\r\n        type: ActionType.UPDATE_DATA,\r\n        payload: {\r\n            [PropName.ARTICLE_DATA_LIST]: articleDataList\r\n        }\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Link to=\"/1\" >\r\n        <img src=\"/top.png\" alt=\"top\" />\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { ArticleDataType, PropName } from './Constant';\r\n\r\ninterface PropType {\r\n  [PropName.ARTICLE_DATA]: ArticleDataType;\r\n}\r\n\r\nconst Article: React.FC<PropType> = (props: PropType) => {\r\n  const embedcode: string = props[PropName.ARTICLE_DATA][PropName.EMBEDCODE];\r\n\r\n  return (\r\n    <div className=\"card m-2\">\r\n      <div className=\"card-body\">\r\n        <div dangerouslySetInnerHTML={{\r\n          __html: embedcode\r\n        }}>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Article;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Article from './Article';\r\nimport { ArticleDataType, PropName } from './Constant';\r\nimport { StoreType } from './Reducer';\r\n\r\nconst MainSection: React.FC = () => {\r\n  const activeDataList: ArticleDataType[] =\r\n    useSelector<StoreType, ArticleDataType[]>(\r\n      state => state[PropName.ACTIVE_ARTICLE_DATA_LIST]\r\n    );\r\n\r\n  return (\r\n    <>\r\n      {activeDataList.map((articleData, index) =>\r\n        <Article articleData={articleData} key={index} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainSection;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport { PropName } from './Constant';\r\nimport { StoreType } from './Reducer';\r\n\r\nconst PageNavigator: React.FC = () => {\r\n  const previousPageNo: string =\r\n    useSelector<StoreType, string>(state => state[PropName.PREVIOUS_PAGE_NO]);\r\n\r\n  const nextPageNo: string =\r\n    useSelector<StoreType, string>(state => state[PropName.NEXT_PAGE_NO]);\r\n\r\n  return (\r\n    <div className=\"p-2 d-flex justify-content-around\"\r\n      style={{ width: 'inherit' }}>\r\n      <div>\r\n        <Link to={previousPageNo} >\r\n          <img src=\"/navigationj_prev.png\" alt=\"prev\" />\r\n        </Link>\r\n      </div>\r\n      <div>\r\n        <Link to={nextPageNo}>\r\n          <img src=\"/navigationj_next.png\" alt=\"next\" />\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageNavigator;","export default class Utils {\r\n    public static scrollToTop(): void {\r\n        window.scroll(0, 0);\r\n    }\r\n\r\n    public static setTitle(title: string): void {\r\n        document.title = title;\r\n    }\r\n\r\n    public static sendAccessLog(path: string): void {\r\n        // for Google Analytics\r\n        // index.htmlで定義している関数\r\n        // HACK\r\n        try {\r\n            (window as any).sendAccessLog(path);\r\n        } catch (error) {\r\n            console.log('sendAccessLogError');\r\n        }\r\n    }\r\n\r\n    public static loadTwitter(): void {\r\n        // for twitter\r\n        // index.htmlで定義している関数\r\n        // HACK\r\n        try {\r\n            (window as any).twttr.widgets.load();\r\n        } catch (error) {\r\n            console.log('loadTwitterError');\r\n        }\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport { setArticleDataList, setPageNo } from './Actions';\r\nimport { ArticleDataType, ARTICLE_DATA_URL, PropName } from './Constant';\r\nimport Header from \"./Header\";\r\nimport MainSection from './MainSection';\r\nimport PageNavigator from \"./PageNavigator\";\r\nimport { StoreType } from './Reducer';\r\nimport Utils from './Utils';\r\n\r\ninterface RouterParamType {\r\n  [PropName.ACTIVE_PAGE_NO]: string;\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const pageNo = useParams<RouterParamType>()[PropName.ACTIVE_PAGE_NO];\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    Utils.scrollToTop();\r\n    Utils.setTitle(`zoo zoo town - page ${pageNo}`);\r\n    Utils.sendAccessLog(window.location.pathname + window.location.hash);\r\n    dispatch(setPageNo(pageNo));\r\n  }, [pageNo, dispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log('fetch');\r\n    fetch(ARTICLE_DATA_URL)\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        const articleDataList: ArticleDataType[] = [];\r\n        for (const item of json.feed.entry) {\r\n          const articleData: ArticleDataType = {\r\n            [PropName.EMBEDCODE]: item[`gsx$${[PropName.EMBEDCODE]}`].$t\r\n          };\r\n          articleDataList.push(articleData);\r\n        }\r\n        articleDataList.reverse();// 新しいもの順に並べ替える\r\n        dispatch(setArticleDataList(articleDataList));\r\n      });\r\n  }, [dispatch]);\r\n\r\n  const activeDataList: ArticleDataType[] =\r\n    useSelector<StoreType, ArticleDataType[]>(\r\n      state => state[PropName.ACTIVE_ARTICLE_DATA_LIST]\r\n    );\r\n\r\n  useEffect(Utils.loadTwitter, [activeDataList]);\r\n\r\n  return (\r\n    <div className=\"mx-auto d-flex flex-column align-items-center\" style={{ width: '600px' }}>\r\n      <Header />\r\n\r\n      <MainSection />\r\n\r\n      <PageNavigator />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","import { ActionObjectType, ActionType, PayloadType } from \"./Actions\";\r\nimport { ArticleDataType, ARTICLES_PER_PAGE, HTTPS_YOUTUBE_URL, HTTP_YOUTUBE_URL, PropName } from \"./Constant\";\r\n\r\nexport interface StoreType {\r\n    [PropName.ACTIVE_PAGE_NO]: string;\r\n    [PropName.PREVIOUS_PAGE_NO]: string;\r\n    [PropName.NEXT_PAGE_NO]: string;\r\n    [PropName.ARTICLE_DATA_LIST]: ArticleDataType[];\r\n    [PropName.ACTIVE_ARTICLE_DATA_LIST]: ArticleDataType[];\r\n}\r\n\r\nconst INITIAL_STATE: StoreType = {\r\n    [PropName.ACTIVE_PAGE_NO]: '1',\r\n    [PropName.PREVIOUS_PAGE_NO]: '1',\r\n    [PropName.NEXT_PAGE_NO]: '1',\r\n    [PropName.ARTICLE_DATA_LIST]: [],\r\n    [PropName.ACTIVE_ARTICLE_DATA_LIST]: []\r\n};\r\n\r\nexport default function Reducer(state = INITIAL_STATE, action: ActionObjectType): StoreType {\r\n    switch (action.type) {\r\n        case ActionType.UPDATE_DATA: {\r\n            return new StateBuilder(state, action.payload).build();\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// HACK actionBuilderを作るまたは置き換える\r\n// actionのpayload部分を(含む部分)をbuilderにする\r\n// buiderではなくstateと同じ型storeにして上書きする\r\nclass StateBuilder {\r\n    private state: StoreType;\r\n\r\n    constructor(state: StoreType, payload: PayloadType) {\r\n        this.state = { ...state, ...payload };\r\n    }\r\n\r\n    build(): StoreType {\r\n        const pageNo: string = this.state[PropName.ACTIVE_PAGE_NO];\r\n\r\n        this.state[PropName.PREVIOUS_PAGE_NO] =\r\n            getPreviousPage(pageNo);\r\n\r\n        this.state[PropName.NEXT_PAGE_NO] =\r\n            getNextPage(pageNo);\r\n\r\n        this.state[PropName.ARTICLE_DATA_LIST] =\r\n            this.state[PropName.ARTICLE_DATA_LIST]\r\n                .filter(removeEmptyDataFilter);\r\n\r\n        this.state[PropName.ACTIVE_ARTICLE_DATA_LIST] =\r\n            getActiveDataList(this.state[PropName.ARTICLE_DATA_LIST],\r\n                this.state[PropName.ACTIVE_PAGE_NO]);\r\n\r\n        return this.state;\r\n    }\r\n}\r\n\r\nfunction getActiveDataList(articleDataList: ArticleDataType[], page: string): ArticleDataType[] {\r\n    const startIndex: number = (parseInt(page) - 1) * ARTICLES_PER_PAGE;\r\n    const endIndex: number = startIndex + ARTICLES_PER_PAGE;\r\n\r\n    return articleDataList\r\n        .slice(startIndex, endIndex)\r\n        .map(httpToHttpsMapper)\r\n        ;\r\n}\r\n\r\nfunction removeEmptyDataFilter(articleData: ArticleDataType): boolean {\r\n    return articleData[PropName.EMBEDCODE] !== '';\r\n}\r\n\r\n// 埋め込みコード内のURLがhttpになっているのでエラー防止のためにhttpsに置換する\r\nfunction httpToHttpsMapper(articleData: ArticleDataType): ArticleDataType {\r\n    let newArticleData: ArticleDataType = { ...articleData }; //deep copy\r\n    newArticleData[PropName.EMBEDCODE] =\r\n        newArticleData[PropName.EMBEDCODE].replace(HTTP_YOUTUBE_URL, HTTPS_YOUTUBE_URL);\r\n    return newArticleData;\r\n}\r\n\r\nfunction getNextPage(page: string): string {\r\n    let pageNum: number = parseInt(page);\r\n    pageNum++;\r\n    return pageNum.toString();\r\n}\r\n\r\nfunction getPreviousPage(page: string): string {\r\n    let pageNum: number = parseInt(page);\r\n    pageNum--;\r\n    pageNum = Math.max(pageNum, 1);//ページの最小値\r\n    return pageNum.toString();\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { createStore } from 'redux';\r\nimport App from './App';\r\nimport { PropName } from './Constant';\r\nimport './index.css';\r\nimport Reducer from './Reducer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={createStore(Reducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__())}>\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path={`/:${PropName.ACTIVE_PAGE_NO}`} component={App} />\r\n\r\n                // 上記のパスに一致しないものは1ページ目にとばす\r\n                <Route render={\r\n                    (): JSX.Element => <Redirect to=\"/1\" />\r\n                } />\r\n            </Switch>\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}