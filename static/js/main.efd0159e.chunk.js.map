{"version":3,"sources":["Constant.ts","Actions.ts","Header.tsx","Article.tsx","MainSection.tsx","MainWidthStyle.tsx","PageNavigator.tsx","Utils.ts","App.tsx","PageManager.ts","Reducer.ts","serviceWorker.ts","index.tsx"],"names":["PropName","ARTICLE_DATA_URL","ActionType","HTTP_YOUTUBE_URL","HTTPS_YOUTUBE_URL","Header","to","src","alt","Article","props","embedcode","ARTICLE_DATA","EMBEDCODE","className","dangerouslySetInnerHTML","__html","MainSection","activeDataList","useSelector","state","ACTIVE_ARTICLE_DATA_LIST","map","articleData","index","key","MainWidthStyle","style","width","children","PageNavigator","previousPageNo","PREVIOUS_PAGE_NO","nextPageNo","NEXT_PAGE_NO","height","Utils","window","scroll","title","document","path","sendAccessLog","error","console","log","twttr","widgets","load","App","activePageNo","parseInt","useParams","ACTIVE_PAGE_NO","dispatch","useDispatch","useEffect","scrollToTop","setTitle","location","pathname","hash","type","UPDATE_DATA","payload","setActivePageNo","fetch","then","response","json","articleDataList","feed","entry","item","$t","push","reverse","ARTICLE_DATA_LIST","setArticleDataList","loadTwitter","PageManagerFactory","articlesPerPage","newLoopPageManager","NormalPageManager","LoopPageManager","pageNo","lastPageNo","this","getLastPageNo","correctPageNo","Math","ceil","length","slice","getStartIndex","getEndIndex","getActivePageNo","INITIAL_STATE","StateBuilder","changedPropNames","Set","Object","keys","filter","removeEmptyDataFilter","pageManager","newDefaultPageManager","getPreviousPageNo","getNextPageNo","getActiveDataList","httpToHttpsMapper","newArticleData","replace","Boolean","hostname","match","ReactDOM","render","store","createStore","action","build","__REDUX_DEVTOOLS_EXTENSION__","exact","component","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efd0159e.chunk.js","sourcesContent":["// propsとstateで利用するプロパティ名\r\nexport enum PropName {\r\n    ACTIVE_PAGE_NO = 'activePageNo',\r\n    PREVIOUS_PAGE_NO = 'previousPageNo',\r\n    NEXT_PAGE_NO = 'nextPageNo',\r\n\r\n    ARTICLE_DATA = 'articleData',\r\n    ARTICLE_DATA_LIST = 'articleDataList',\r\n    ACTIVE_ARTICLE_DATA_LIST = 'activeArticleDataList',\r\n\r\n    EMBEDCODE = 'embedcode',// データベースの列名(googleの仕様上アンダーバーが消える)\r\n}\r\n\r\nexport interface ArticleDataType {\r\n    [PropName.EMBEDCODE]: string;\r\n}\r\n\r\nexport const SPREADSHEET_ID: string =\r\n    '1jDoKicjNhz0ZOJRGP0K3Dw-4ioqcc1xsLyOYz0cM_rU';\r\n\r\nexport const ARTICLE_DATA_URL: string = getSpreadsheetURL(SPREADSHEET_ID);\r\n\r\nfunction getSpreadsheetURL(spreadsheetID: string): string {\r\n    return `https://spreadsheets.google.com/feeds/list/${spreadsheetID}/od6/public/values?alt=json`;\r\n}\r\n\r\nexport const ARTICLES_PER_PAGE: number = 5;\r\n\r\nexport const HTTP_YOUTUBE_URL: string = 'http://youtube.com';\r\nexport const HTTPS_YOUTUBE_URL: string = 'https://youtube.com';\r\n","import { Action } from \"redux\";\r\nimport { ArticleDataType, PropName } from \"./Constant\";\r\nimport { StoreStateType } from \"./Reducer\";\r\n\r\nexport enum ActionType {\r\n    UPDATE_DATA\r\n}\r\n\r\nexport type PayloadType = Partial<StoreStateType>;\r\n\r\nexport interface ActionObjectType extends Action {\r\n    type: ActionType;\r\n    payload: PayloadType;\r\n}\r\n\r\nexport function setActivePageNo(activePageNo: number): ActionObjectType {\r\n    return {\r\n        type: ActionType.UPDATE_DATA,\r\n        payload: {\r\n            [PropName.ACTIVE_PAGE_NO]: activePageNo\r\n        }\r\n    };\r\n}\r\n\r\nexport function setArticleDataList(articleDataList: ArticleDataType[]):\r\n    ActionObjectType {\r\n    return {\r\n        type: ActionType.UPDATE_DATA,\r\n        payload: {\r\n            [PropName.ARTICLE_DATA_LIST]: articleDataList\r\n        }\r\n    };\r\n}\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Link to=\"/1\" >\r\n        <img src=\"/top.png\" alt=\"top\" />\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport { ArticleDataType, PropName } from './Constant';\r\n\r\ninterface PropType {\r\n  [PropName.ARTICLE_DATA]: ArticleDataType;\r\n}\r\n\r\nconst Article: React.FC<PropType> = (props: PropType) => {\r\n  const embedcode: string = props[PropName.ARTICLE_DATA][PropName.EMBEDCODE];\r\n\r\n  return (\r\n    <div className=\"card m-2\">\r\n      <div className=\"card-body\">\r\n        <div dangerouslySetInnerHTML={{\r\n          __html: embedcode\r\n        }}>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Article;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Article from './Article';\r\nimport { ArticleDataType, PropName } from './Constant';\r\nimport { StoreStateType } from './Reducer';\r\n\r\nconst MainSection: React.FC = () => {\r\n  const activeDataList: ArticleDataType[] =\r\n    useSelector<StoreStateType, ArticleDataType[]>(\r\n      state => state[PropName.ACTIVE_ARTICLE_DATA_LIST]\r\n    );\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column align-items-center\" >\r\n      {activeDataList.map((articleData, index) =>\r\n        <Article articleData={articleData} key={index} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainSection;\r\n","import React from 'react';\r\n\r\ninterface PropType {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst MainWidthStyle: React.FC<PropType> = (props: PropType) => {\r\n  return (\r\n    <div className=\"mx-auto\" style={{ width: '600px' }}>\r\n      {props.children}\r\n    </div >\r\n  );\r\n};\r\n\r\nexport default MainWidthStyle;","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Link } from \"react-router-dom\";\r\nimport { PropName } from './Constant';\r\nimport { StoreStateType } from './Reducer';\r\n\r\nconst PageNavigator: React.FC = () => {\r\n  const previousPageNo: number =\r\n    useSelector<StoreStateType, number>(state => state[PropName.PREVIOUS_PAGE_NO]);\r\n\r\n  const nextPageNo: number =\r\n    useSelector<StoreStateType, number>(state => state[PropName.NEXT_PAGE_NO]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"mx-auto fixed-bottom p-2 d-flex justify-content-around\"\r\n        style={{ width: 'inherit' }}>\r\n        <div>\r\n          <Link to={`${previousPageNo}`} >\r\n            <img src=\"/navigationj_prev.png\" alt=\"prev\" />\r\n          </Link>\r\n        </div>\r\n        <div>\r\n          <Link to={`${nextPageNo}`}>\r\n            <img src=\"/navigationj_next.png\" alt=\"next\" />\r\n          </Link>\r\n        </div>\r\n      </div>\r\n\r\n      <div style={{ height: \"112px\" }}>\r\n        {\r\n          //float margin\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageNavigator;","export default class Utils {\r\n    public static scrollToTop(): void {\r\n        window.scroll(0, 0);\r\n    }\r\n\r\n    public static setTitle(title: string): void {\r\n        document.title = title;\r\n    }\r\n\r\n    public static sendAccessLog(path: string): void {\r\n        // for Google Analytics\r\n        // index.htmlで定義している関数\r\n        // HACK\r\n        try {\r\n            (window as any).sendAccessLog(path);\r\n        } catch (error) {\r\n            console.log('sendAccessLogError');\r\n        }\r\n    }\r\n\r\n    public static loadTwitter(): void {\r\n        // for twitter\r\n        // index.htmlで定義している関数\r\n        // HACK\r\n        try {\r\n            (window as any).twttr.widgets.load();\r\n        } catch (error) {\r\n            console.log('loadTwitterError');\r\n        }\r\n    }\r\n}","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router';\r\nimport { setArticleDataList, setActivePageNo } from './Actions';\r\nimport { ArticleDataType, ARTICLE_DATA_URL, PropName } from './Constant';\r\nimport Header from \"./Header\";\r\nimport MainSection from './MainSection';\r\nimport MainWidthStyle from './MainWidthStyle';\r\nimport PageNavigator from \"./PageNavigator\";\r\nimport { StoreStateType } from './Reducer';\r\nimport Utils from './Utils';\r\n\r\ninterface RouterParamType {\r\n  [PropName.ACTIVE_PAGE_NO]: string;\r\n}\r\n\r\nconst App: React.FC = () => {\r\n  const activePageNo = parseInt(useParams<RouterParamType>()[PropName.ACTIVE_PAGE_NO]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    Utils.scrollToTop();\r\n    Utils.setTitle(`zoo zoo town - page ${activePageNo}`);\r\n    Utils.sendAccessLog(window.location.pathname + window.location.hash);\r\n    dispatch(setActivePageNo(activePageNo));\r\n  }, [activePageNo, dispatch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log('fetch');\r\n    fetch(ARTICLE_DATA_URL)\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        const articleDataList: ArticleDataType[] = [];\r\n        for (const item of json.feed.entry) {\r\n          const articleData: ArticleDataType = {\r\n            [PropName.EMBEDCODE]: item[`gsx$${[PropName.EMBEDCODE]}`].$t\r\n          };\r\n          articleDataList.push(articleData);\r\n        }\r\n        articleDataList.reverse();// 新しいもの順に並べ替える\r\n        dispatch(setArticleDataList(articleDataList));\r\n      });\r\n  }, [dispatch]);\r\n\r\n  const activeDataList: ArticleDataType[] =\r\n    useSelector<StoreStateType, ArticleDataType[]>(\r\n      state => state[PropName.ACTIVE_ARTICLE_DATA_LIST]\r\n    );\r\n\r\n  useEffect(Utils.loadTwitter, [activeDataList]);\r\n\r\n  return (\r\n    <>\r\n      <MainWidthStyle>\r\n        <Header />\r\n      </MainWidthStyle>\r\n\r\n      <MainWidthStyle>\r\n        <MainSection />\r\n      </MainWidthStyle>\r\n\r\n      <MainWidthStyle>\r\n        <PageNavigator />\r\n      </MainWidthStyle>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;","const FIRST_PAGE_NO: number = 1;\r\n\r\nexport interface PageManager<T> {\r\n    getPreviousPageNo(): number;\r\n    getActivePageNo(): number;\r\n    getNextPageNo(): number;\r\n    getLastPageNo(): number;\r\n    getActiveDataList(): T[];\r\n}\r\n\r\nexport class PageManagerFactory {\r\n    static newDefaultPageManager<T>(articleDataList: T[],\r\n        articlesPerPage: number,\r\n        activePageNo: number): PageManager<T> {\r\n        return PageManagerFactory.newLoopPageManager(articleDataList,\r\n            articlesPerPage,\r\n            activePageNo);\r\n    }\r\n\r\n    static newNormalPageManager<T>(articleDataList: T[],\r\n        articlesPerPage: number,\r\n        activePageNo: number): PageManager<T> {\r\n        return new NormalPageManager(articleDataList,\r\n            articlesPerPage,\r\n            activePageNo);\r\n    }\r\n\r\n    static newLoopPageManager<T>(articleDataList: T[],\r\n        articlesPerPage: number,\r\n        activePageNo: number): PageManager<T> {\r\n        return new LoopPageManager(articleDataList,\r\n            articlesPerPage,\r\n            activePageNo);\r\n    }\r\n}\r\n\r\nclass NormalPageManager<T> implements PageManager<T> {\r\n    constructor(private articleDataList: T[],\r\n        private articlesPerPage: number,\r\n        private activePageNo: number) {\r\n    }\r\n\r\n    protected correctPageNo(pageNo: number): number {\r\n        const lastPageNo: number = this.getLastPageNo();\r\n\r\n        if (pageNo < FIRST_PAGE_NO) {// 下限\r\n            return FIRST_PAGE_NO;\r\n        } else if (lastPageNo < pageNo) {// 上限\r\n            return lastPageNo;\r\n        } else {// 正常値\r\n            return pageNo;\r\n        }\r\n    }\r\n\r\n    getPreviousPageNo(): number {\r\n        return this.correctPageNo(this.activePageNo - 1);\r\n    }\r\n\r\n    getActivePageNo(): number {\r\n        return this.correctPageNo(this.activePageNo);\r\n    }\r\n\r\n    getNextPageNo(): number {\r\n        return this.correctPageNo(this.activePageNo + 1);\r\n    }\r\n\r\n    getLastPageNo(): number {\r\n        return Math.ceil(this.articleDataList.length / this.articlesPerPage);\r\n    }\r\n\r\n    getActiveDataList(): T[] {\r\n        return this.articleDataList.slice(this.getStartIndex(), this.getEndIndex());\r\n    }\r\n\r\n    private getStartIndex(): number {\r\n        return (this.getActivePageNo() - 1) * this.articlesPerPage;\r\n    }\r\n\r\n    private getEndIndex(): number {\r\n        return this.getStartIndex() + this.articlesPerPage;\r\n    }\r\n}\r\n\r\nclass LoopPageManager<T> extends NormalPageManager<T> {\r\n    protected correctPageNo(pageNo: number): number {\r\n        const lastPageNo: number = this.getLastPageNo();\r\n\r\n        if (pageNo < FIRST_PAGE_NO) {// 下限\r\n            return (pageNo % lastPageNo) + lastPageNo;\r\n        } else if (lastPageNo < pageNo) {// 上限\r\n            return pageNo % lastPageNo;\r\n        } else {// 正常値\r\n            return pageNo;\r\n        }\r\n    }\r\n}","import { ActionObjectType, ActionType, PayloadType } from \"./Actions\";\r\nimport { ArticleDataType, ARTICLES_PER_PAGE, HTTPS_YOUTUBE_URL, HTTP_YOUTUBE_URL, PropName } from \"./Constant\";\r\nimport { PageManager, PageManagerFactory } from \"./PageManager\";\r\n\r\nexport interface StoreStateType {\r\n    [PropName.ACTIVE_PAGE_NO]: number;\r\n    [PropName.PREVIOUS_PAGE_NO]: number;\r\n    [PropName.NEXT_PAGE_NO]: number;\r\n    [PropName.ARTICLE_DATA_LIST]: ArticleDataType[];\r\n    [PropName.ACTIVE_ARTICLE_DATA_LIST]: ArticleDataType[];\r\n}\r\n\r\nconst INITIAL_STATE: StoreStateType = {\r\n    [PropName.ACTIVE_PAGE_NO]: 1,\r\n    [PropName.PREVIOUS_PAGE_NO]: 1,\r\n    [PropName.NEXT_PAGE_NO]: 1,\r\n    [PropName.ARTICLE_DATA_LIST]: [],\r\n    [PropName.ACTIVE_ARTICLE_DATA_LIST]: []\r\n};\r\n\r\nexport default function Reducer(state = INITIAL_STATE, action: ActionObjectType): StoreStateType {\r\n    switch (action.type) {\r\n        case ActionType.UPDATE_DATA: {\r\n            return new StateBuilder(state, action.payload).build();\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nclass StateBuilder {\r\n    private state: StoreStateType;\r\n    private changedPropNames: Set<string>;\r\n\r\n    constructor(state: StoreStateType, payload: PayloadType) {\r\n        this.state = { ...state, ...payload };\r\n\r\n        this.changedPropNames = new Set(Object.keys(payload));\r\n    }\r\n\r\n    build(): StoreStateType {\r\n        const articleDataList: ArticleDataType[] = this.state[PropName.ARTICLE_DATA_LIST]\r\n            .filter(removeEmptyDataFilter);\r\n\r\n        const pageManager: PageManager<ArticleDataType> =\r\n            PageManagerFactory.newDefaultPageManager(\r\n                articleDataList, ARTICLES_PER_PAGE, this.state[PropName.ACTIVE_PAGE_NO]);\r\n\r\n        return {\r\n            // fetchされる前はarticleDataListが空なのでpageManagerを使用するとページが0になる\r\n            [PropName.ACTIVE_PAGE_NO]: this.state[PropName.ACTIVE_PAGE_NO],\r\n\r\n            [PropName.PREVIOUS_PAGE_NO]: pageManager.getPreviousPageNo(),\r\n            [PropName.NEXT_PAGE_NO]: pageManager.getNextPageNo(),\r\n            [PropName.ARTICLE_DATA_LIST]: articleDataList,\r\n            [PropName.ACTIVE_ARTICLE_DATA_LIST]:\r\n                pageManager.getActiveDataList().map(httpToHttpsMapper),\r\n        };\r\n    }\r\n}\r\n\r\nfunction removeEmptyDataFilter(articleData: ArticleDataType): boolean {\r\n    return articleData[PropName.EMBEDCODE] !== '';\r\n}\r\n\r\n// 埋め込みコード内のURLがhttpになっているのでエラー防止のためにhttpsに置換する\r\nfunction httpToHttpsMapper(articleData: ArticleDataType): ArticleDataType {\r\n    let newArticleData: ArticleDataType = { ...articleData }; //deep copy\r\n    newArticleData[PropName.EMBEDCODE] =\r\n        newArticleData[PropName.EMBEDCODE].replace(HTTP_YOUTUBE_URL, HTTPS_YOUTUBE_URL);\r\n    return newArticleData;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"react-redux\";\r\nimport { HashRouter as Router, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { createStore } from 'redux';\r\nimport App from './App';\r\nimport { PropName } from './Constant';\r\nimport './index.css';\r\nimport Reducer from './Reducer';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={createStore(Reducer, (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__())}>\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path={`/:${PropName.ACTIVE_PAGE_NO}`} component={App} />\r\n\r\n                // 上記のパスに一致しないものは1ページ目にとばす\r\n                <Route render={\r\n                    (): JSX.Element => <Redirect to=\"/1\" />\r\n                } />\r\n            </Switch>\r\n        </Router>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}